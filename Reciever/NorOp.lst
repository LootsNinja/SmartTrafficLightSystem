;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 5/24/2015 2:57:13 AM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x28A0      	GOTO       160
0x0001	0x0000      	NOP
0x0002	0x0000      	NOP
0x0003	0x0000      	NOP
0x0004	0x29AD      	GOTO       429
_____DoICP:
;__Lib_System.c,6 :: 		
;__Lib_System.c,9 :: 		
0x0005	0x1283      	BCF        STATUS, 5
0x0006	0x1303      	BCF        STATUS, 6
0x0007	0x0828      	MOVF       ___DoICPAddr+1, 0
0x0008	0x008A      	MOVWF      PCLATH
;__Lib_System.c,10 :: 		
0x0009	0x0827      	MOVF       ___DoICPAddr, 0
0x000A	0x0082      	MOVWF      PCL
;__Lib_System.c,12 :: 		
0x000B	0x0008      	RETURN
; end of _____DoICP
_delay:
;NorOp.c,25 :: 		void delay(int sec){       //delay function
;NorOp.c,26 :: 		INTCON = INTCON | 0x20;
0x000C	0x168B      	BSF        INTCON, 5
;NorOp.c,27 :: 		tick=0;
0x000D	0x1283      	BCF        STATUS, 5
0x000E	0x1303      	BCF        STATUS, 6
0x000F	0x01A2      	CLRF       _tick
0x0010	0x01A3      	CLRF       _tick+1
;NorOp.c,28 :: 		while(tick<sec);
L_delay2:
0x0011	0x3080      	MOVLW      128
0x0012	0x0623      	XORWF      _tick+1, 0
0x0013	0x00F0      	MOVWF      R0
0x0014	0x3080      	MOVLW      128
0x0015	0x062C      	XORWF      FARG_delay_sec+1, 0
0x0016	0x0270      	SUBWF      R0, 0
0x0017	0x1D03      	BTFSS      STATUS, 2
0x0018	0x281B      	GOTO       L__delay35
0x0019	0x082B      	MOVF       FARG_delay_sec, 0
0x001A	0x0222      	SUBWF      _tick, 0
L__delay35:
0x001B	0x1803      	BTFSC      STATUS, 0
0x001C	0x281E      	GOTO       L_delay3
0x001D	0x2811      	GOTO       L_delay2
L_delay3:
;NorOp.c,29 :: 		INTCON = 0xC0;
0x001E	0x30C0      	MOVLW      192
0x001F	0x008B      	MOVWF      INTCON
;NorOp.c,30 :: 		}
0x0020	0x0008      	RETURN
; end of _delay
_emergency:
;NorOp.c,137 :: 		void emergency()
;NorOp.c,139 :: 		while (Pressed == 0x01){    // check if we need first traffic light to be green
L_emergency18:
0x0021	0x1283      	BCF        STATUS, 5
0x0022	0x1303      	BCF        STATUS, 6
0x0023	0x0824      	MOVF       _Pressed, 0
0x0024	0x3A01      	XORLW      1
0x0025	0x1D03      	BTFSS      STATUS, 2
0x0026	0x283B      	GOTO       L_emergency19
;NorOp.c,140 :: 		PORTB = 0b00101001;
0x0027	0x3029      	MOVLW      41
0x0028	0x0086      	MOVWF      PORTB
;NorOp.c,141 :: 		PORTD = 0b10011001;
0x0029	0x3099      	MOVLW      153
0x002A	0x0088      	MOVWF      PORTD
;NorOp.c,142 :: 		while (!(Pressed == 0x05));       // keep it green until we press the reset
L_emergency20:
0x002B	0x0824      	MOVF       _Pressed, 0
0x002C	0x3A05      	XORLW      5
0x002D	0x1903      	BTFSC      STATUS, 2
0x002E	0x2830      	GOTO       L_emergency21
0x002F	0x282B      	GOTO       L_emergency20
L_emergency21:
;NorOp.c,143 :: 		EmergencyLights = 0x00;
0x0030	0x01A1      	CLRF       _EmergencyLights
;NorOp.c,144 :: 		PORTB = 0b10001000;
0x0031	0x3088      	MOVLW      136
0x0032	0x0086      	MOVWF      PORTB
;NorOp.c,145 :: 		PORTD = 0b10001000;
0x0033	0x3088      	MOVLW      136
0x0034	0x0088      	MOVWF      PORTD
;NorOp.c,146 :: 		delay(100);
0x0035	0x3064      	MOVLW      100
0x0036	0x00AB      	MOVWF      FARG_delay_sec
0x0037	0x3000      	MOVLW      0
0x0038	0x00AC      	MOVWF      FARG_delay_sec+1
0x0039	0x200C      	CALL       _delay
;NorOp.c,147 :: 		}
0x003A	0x2821      	GOTO       L_emergency18
L_emergency19:
;NorOp.c,148 :: 		while (Pressed == 0x02){     // check if we need second traffic light to be green
L_emergency22:
0x003B	0x0824      	MOVF       _Pressed, 0
0x003C	0x3A02      	XORLW      2
0x003D	0x1D03      	BTFSS      STATUS, 2
0x003E	0x2853      	GOTO       L_emergency23
;NorOp.c,149 :: 		PORTB = 0b10010010;
0x003F	0x3092      	MOVLW      146
0x0040	0x0086      	MOVWF      PORTB
;NorOp.c,150 :: 		PORTD = 0b10011001;
0x0041	0x3099      	MOVLW      153
0x0042	0x0088      	MOVWF      PORTD
;NorOp.c,151 :: 		while (!(Pressed == 0x05));      // keep it green until we press the reset
L_emergency24:
0x0043	0x0824      	MOVF       _Pressed, 0
0x0044	0x3A05      	XORLW      5
0x0045	0x1903      	BTFSC      STATUS, 2
0x0046	0x2848      	GOTO       L_emergency25
0x0047	0x2843      	GOTO       L_emergency24
L_emergency25:
;NorOp.c,152 :: 		EmergencyLights = 0x00;
0x0048	0x01A1      	CLRF       _EmergencyLights
;NorOp.c,153 :: 		PORTB = 0b10001000;
0x0049	0x3088      	MOVLW      136
0x004A	0x0086      	MOVWF      PORTB
;NorOp.c,154 :: 		PORTD = 0b10001000;
0x004B	0x3088      	MOVLW      136
0x004C	0x0088      	MOVWF      PORTD
;NorOp.c,155 :: 		delay(100);
0x004D	0x3064      	MOVLW      100
0x004E	0x00AB      	MOVWF      FARG_delay_sec
0x004F	0x3000      	MOVLW      0
0x0050	0x00AC      	MOVWF      FARG_delay_sec+1
0x0051	0x200C      	CALL       _delay
;NorOp.c,156 :: 		}
0x0052	0x283B      	GOTO       L_emergency22
L_emergency23:
;NorOp.c,157 :: 		while (Pressed == 0x03){     // check if we need third traffic light to be green
L_emergency26:
0x0053	0x0824      	MOVF       _Pressed, 0
0x0054	0x3A03      	XORLW      3
0x0055	0x1D03      	BTFSS      STATUS, 2
0x0056	0x286B      	GOTO       L_emergency27
;NorOp.c,158 :: 		PORTB = 0b10011001;
0x0057	0x3099      	MOVLW      153
0x0058	0x0086      	MOVWF      PORTB
;NorOp.c,159 :: 		PORTD = 0b00101001;
0x0059	0x3029      	MOVLW      41
0x005A	0x0088      	MOVWF      PORTD
;NorOp.c,160 :: 		while (!(Pressed == 0x05));       // keep it green until we press the reset
L_emergency28:
0x005B	0x0824      	MOVF       _Pressed, 0
0x005C	0x3A05      	XORLW      5
0x005D	0x1903      	BTFSC      STATUS, 2
0x005E	0x2860      	GOTO       L_emergency29
0x005F	0x285B      	GOTO       L_emergency28
L_emergency29:
;NorOp.c,161 :: 		EmergencyLights = 0x00;
0x0060	0x01A1      	CLRF       _EmergencyLights
;NorOp.c,162 :: 		PORTB = 0b10001000;
0x0061	0x3088      	MOVLW      136
0x0062	0x0086      	MOVWF      PORTB
;NorOp.c,163 :: 		PORTD = 0b10001000;
0x0063	0x3088      	MOVLW      136
0x0064	0x0088      	MOVWF      PORTD
;NorOp.c,164 :: 		delay(100);
0x0065	0x3064      	MOVLW      100
0x0066	0x00AB      	MOVWF      FARG_delay_sec
0x0067	0x3000      	MOVLW      0
0x0068	0x00AC      	MOVWF      FARG_delay_sec+1
0x0069	0x200C      	CALL       _delay
;NorOp.c,165 :: 		}
0x006A	0x2853      	GOTO       L_emergency26
L_emergency27:
;NorOp.c,166 :: 		while (Pressed == 0x04){     // check if we need fourth traffic light to be green
L_emergency30:
0x006B	0x0824      	MOVF       _Pressed, 0
0x006C	0x3A04      	XORLW      4
0x006D	0x1D03      	BTFSS      STATUS, 2
0x006E	0x2883      	GOTO       L_emergency31
;NorOp.c,167 :: 		PORTB = 0b10011001;
0x006F	0x3099      	MOVLW      153
0x0070	0x0086      	MOVWF      PORTB
;NorOp.c,168 :: 		PORTD = 0b10010010;
0x0071	0x3092      	MOVLW      146
0x0072	0x0088      	MOVWF      PORTD
;NorOp.c,169 :: 		while (!(Pressed == 0x05));      // keep it green until we press the reset
L_emergency32:
0x0073	0x0824      	MOVF       _Pressed, 0
0x0074	0x3A05      	XORLW      5
0x0075	0x1903      	BTFSC      STATUS, 2
0x0076	0x2878      	GOTO       L_emergency33
0x0077	0x2873      	GOTO       L_emergency32
L_emergency33:
;NorOp.c,170 :: 		EmergencyLights = 0x00;
0x0078	0x01A1      	CLRF       _EmergencyLights
;NorOp.c,171 :: 		PORTB = 0b10001000;
0x0079	0x3088      	MOVLW      136
0x007A	0x0086      	MOVWF      PORTB
;NorOp.c,172 :: 		PORTD = 0b10001000;
0x007B	0x3088      	MOVLW      136
0x007C	0x0088      	MOVWF      PORTD
;NorOp.c,173 :: 		delay(100);
0x007D	0x3064      	MOVLW      100
0x007E	0x00AB      	MOVWF      FARG_delay_sec
0x007F	0x3000      	MOVLW      0
0x0080	0x00AC      	MOVWF      FARG_delay_sec+1
0x0081	0x200C      	CALL       _delay
;NorOp.c,174 :: 		}
0x0082	0x286B      	GOTO       L_emergency30
L_emergency31:
;NorOp.c,176 :: 		}
0x0083	0x0008      	RETURN
; end of _emergency
_USART_init:
;NorOp.c,178 :: 		void USART_init(void)
;NorOp.c,180 :: 		TRISC = 0x80;//set the direction for the Tx and Rx Pins
0x0084	0x3080      	MOVLW      128
0x0085	0x1683      	BSF        STATUS, 5
0x0086	0x1303      	BCF        STATUS, 6
0x0087	0x0087      	MOVWF      TRISC
;NorOp.c,181 :: 		SPBRG = 51; // High Speed, 9600bps
0x0088	0x3033      	MOVLW      51
0x0089	0x0099      	MOVWF      SPBRG
;NorOp.c,182 :: 		TXSTA = 0x24; //select the Asynchronous mode, 8-bit data, high speed
0x008A	0x3024      	MOVLW      36
0x008B	0x0098      	MOVWF      TXSTA
;NorOp.c,183 :: 		RCSTA = 0x90; // Enable the serial port, 8-bit data, continuous receive
0x008C	0x3090      	MOVLW      144
0x008D	0x1283      	BCF        STATUS, 5
0x008E	0x0098      	MOVWF      RCSTA
;NorOp.c,184 :: 		INTCON = INTCON | 0xC0;// GIE and PEIE  and tmr0
0x008F	0x30C0      	MOVLW      192
0x0090	0x048B      	IORWF      INTCON, 1
;NorOp.c,185 :: 		PIE1 =  PIE1 | 0x20;// Enable the RCIE
0x0091	0x1683      	BSF        STATUS, 5
0x0092	0x168C      	BSF        PIE1, 5
;NorOp.c,187 :: 		}
0x0093	0x0008      	RETURN
; end of _USART_init
___CC2DW:
;__Lib_System.c,24 :: 		
;__Lib_System.c,27 :: 		
_CC2D_Loop1:
;__Lib_System.c,29 :: 		
0x0094	0x2005      	CALL       _____DoICP
0x0095	0x118A      	BCF        PCLATH, 3
0x0096	0x120A      	BCF        PCLATH, 4
;__Lib_System.c,31 :: 		
0x0097	0x0080      	MOVWF      INDF
;__Lib_System.c,32 :: 		
0x0098	0x0A84      	INCF       FSR, 1
;__Lib_System.c,33 :: 		
0x0099	0x0AA7      	INCF       ___DoICPAddr, 1
;__Lib_System.c,35 :: 		
0x009A	0x1903      	BTFSC      STATUS, 2
;__Lib_System.c,36 :: 		
0x009B	0x0AA8      	INCF       ___DoICPAddr+1, 1
;__Lib_System.c,37 :: 		
0x009C	0x03F0      	DECF       R0, 1
;__Lib_System.c,39 :: 		
0x009D	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,40 :: 		
0x009E	0x2894      	GOTO       _CC2D_Loop1
;__Lib_System.c,42 :: 		
0x009F	0x0008      	RETURN
; end of ___CC2DW
_main:
;NorOp.c,32 :: 		void main (){                                                                                    // Main
;NorOp.c,33 :: 		option_reg = 0x07;        //prescale of 1:256
0x00A0	0x1283      	BCF        STATUS, 5
0x00A1	0x1303      	BCF        STATUS, 6
0x00A2	0x01A1      	CLRF       _EmergencyLights
0x00A3	0x01A2      	CLRF       _tick
0x00A4	0x01A3      	CLRF       35
0x00A5	0x01A4      	CLRF       _Pressed
0x00A6	0x3007      	MOVLW      7
0x00A7	0x1683      	BSF        STATUS, 5
0x00A8	0x0081      	MOVWF      OPTION_REG
;NorOp.c,34 :: 		TRISB = 0x00; //B is set to output except for B0 excute the intterupt
0x00A9	0x0186      	CLRF       TRISB
;NorOp.c,35 :: 		TRISD = 0x00; //D is set to output
0x00AA	0x0188      	CLRF       TRISD
;NorOp.c,36 :: 		PORTB = 0x00; // inital value = 0
0x00AB	0x1283      	BCF        STATUS, 5
0x00AC	0x0186      	CLRF       PORTB
;NorOp.c,37 :: 		PORTD = 0x00; // inital value = 0
0x00AD	0x0188      	CLRF       PORTD
;NorOp.c,38 :: 		USART_init(); // initialize USART
0x00AE	0x2084      	CALL       _USART_init
;NorOp.c,39 :: 		ADCoN1 = 0b00000110;
0x00AF	0x3006      	MOVLW      6
0x00B0	0x009F      	MOVWF      ADCON1
;NorOp.c,40 :: 		PORTB = 0b10001000;
0x00B1	0x3088      	MOVLW      136
0x00B2	0x1283      	BCF        STATUS, 5
0x00B3	0x0086      	MOVWF      PORTB
;NorOp.c,41 :: 		PORTD = 0b10001000;
0x00B4	0x3088      	MOVLW      136
0x00B5	0x0088      	MOVWF      PORTD
;NorOp.c,42 :: 		delay(10);
0x00B6	0x300A      	MOVLW      10
0x00B7	0x00AB      	MOVWF      FARG_delay_sec
0x00B8	0x3000      	MOVLW      0
0x00B9	0x00AC      	MOVWF      FARG_delay_sec+1
0x00BA	0x200C      	CALL       _delay
;NorOp.c,43 :: 		while (1)
L_main4:
;NorOp.c,48 :: 		PORTB = EmergencyLights | 0b00101000;
0x00BB	0x3028      	MOVLW      40
0x00BC	0x0421      	IORWF      _EmergencyLights, 0
0x00BD	0x0086      	MOVWF      PORTB
;NorOp.c,49 :: 		PORTD = EmergencyLights | 0b10001000;
0x00BE	0x3088      	MOVLW      136
0x00BF	0x0421      	IORWF      _EmergencyLights, 0
0x00C0	0x0088      	MOVWF      PORTD
;NorOp.c,50 :: 		delay(1000);    //Traffic light stays green for 10 seconds
0x00C1	0x30E8      	MOVLW      232
0x00C2	0x00AB      	MOVWF      FARG_delay_sec
0x00C3	0x3003      	MOVLW      3
0x00C4	0x00AC      	MOVWF      FARG_delay_sec+1
0x00C5	0x200C      	CALL       _delay
;NorOp.c,52 :: 		for ( i = 0 ; i<3; i++)
0x00C6	0x01A5      	CLRF       _i
0x00C7	0x01A6      	CLRF       _i+1
L_main6:
0x00C8	0x3080      	MOVLW      128
0x00C9	0x0626      	XORWF      _i+1, 0
0x00CA	0x00F0      	MOVWF      R0
0x00CB	0x3080      	MOVLW      128
0x00CC	0x0270      	SUBWF      R0, 0
0x00CD	0x1D03      	BTFSS      STATUS, 2
0x00CE	0x28D1      	GOTO       L__main36
0x00CF	0x3003      	MOVLW      3
0x00D0	0x0225      	SUBWF      _i, 0
L__main36:
0x00D1	0x1803      	BTFSC      STATUS, 0
0x00D2	0x28E7      	GOTO       L_main7
;NorOp.c,54 :: 		PORTB = EmergencyLights | 0b00001000;  //Green light off
0x00D3	0x3008      	MOVLW      8
0x00D4	0x0421      	IORWF      _EmergencyLights, 0
0x00D5	0x0086      	MOVWF      PORTB
;NorOp.c,55 :: 		delay(50);
0x00D6	0x3032      	MOVLW      50
0x00D7	0x00AB      	MOVWF      FARG_delay_sec
0x00D8	0x3000      	MOVLW      0
0x00D9	0x00AC      	MOVWF      FARG_delay_sec+1
0x00DA	0x200C      	CALL       _delay
;NorOp.c,56 :: 		PORTB = EmergencyLights | 0b00101000;  //Green light on
0x00DB	0x3028      	MOVLW      40
0x00DC	0x0421      	IORWF      _EmergencyLights, 0
0x00DD	0x0086      	MOVWF      PORTB
;NorOp.c,57 :: 		delay(50);
0x00DE	0x3032      	MOVLW      50
0x00DF	0x00AB      	MOVWF      FARG_delay_sec
0x00E0	0x3000      	MOVLW      0
0x00E1	0x00AC      	MOVWF      FARG_delay_sec+1
0x00E2	0x200C      	CALL       _delay
;NorOp.c,52 :: 		for ( i = 0 ; i<3; i++)
0x00E3	0x0AA5      	INCF       _i, 1
0x00E4	0x1903      	BTFSC      STATUS, 2
0x00E5	0x0AA6      	INCF       _i+1, 1
;NorOp.c,58 :: 		}
0x00E6	0x28C8      	GOTO       L_main6
L_main7:
;NorOp.c,60 :: 		PORTB = EmergencyLights | 0b01001000;
0x00E7	0x3048      	MOVLW      72
0x00E8	0x0421      	IORWF      _EmergencyLights, 0
0x00E9	0x0086      	MOVWF      PORTB
;NorOp.c,61 :: 		delay(200);
0x00EA	0x30C8      	MOVLW      200
0x00EB	0x00AB      	MOVWF      FARG_delay_sec
0x00EC	0x01AC      	CLRF       FARG_delay_sec+1
0x00ED	0x200C      	CALL       _delay
;NorOp.c,63 :: 		PORTB = EmergencyLights | 0b10001000;
0x00EE	0x3088      	MOVLW      136
0x00EF	0x0421      	IORWF      _EmergencyLights, 0
0x00F0	0x0086      	MOVWF      PORTB
;NorOp.c,64 :: 		delay(100);
0x00F1	0x3064      	MOVLW      100
0x00F2	0x00AB      	MOVWF      FARG_delay_sec
0x00F3	0x3000      	MOVLW      0
0x00F4	0x00AC      	MOVWF      FARG_delay_sec+1
0x00F5	0x200C      	CALL       _delay
;NorOp.c,65 :: 		emergency ();
0x00F6	0x2021      	CALL       _emergency
;NorOp.c,69 :: 		PORTB = EmergencyLights | 0b10000010;
0x00F7	0x3082      	MOVLW      130
0x00F8	0x0421      	IORWF      _EmergencyLights, 0
0x00F9	0x0086      	MOVWF      PORTB
;NorOp.c,70 :: 		PORTD = EmergencyLights | 0b10001000;
0x00FA	0x3088      	MOVLW      136
0x00FB	0x0421      	IORWF      _EmergencyLights, 0
0x00FC	0x0088      	MOVWF      PORTD
;NorOp.c,71 :: 		delay(1000);    //Traffic light stays green for 10 seconds
0x00FD	0x30E8      	MOVLW      232
0x00FE	0x00AB      	MOVWF      FARG_delay_sec
0x00FF	0x3003      	MOVLW      3
0x0100	0x00AC      	MOVWF      FARG_delay_sec+1
0x0101	0x200C      	CALL       _delay
;NorOp.c,73 :: 		for ( i = 0 ; i<3; i++)
0x0102	0x01A5      	CLRF       _i
0x0103	0x01A6      	CLRF       _i+1
L_main9:
0x0104	0x3080      	MOVLW      128
0x0105	0x0626      	XORWF      _i+1, 0
0x0106	0x00F0      	MOVWF      R0
0x0107	0x3080      	MOVLW      128
0x0108	0x0270      	SUBWF      R0, 0
0x0109	0x1D03      	BTFSS      STATUS, 2
0x010A	0x290D      	GOTO       L__main37
0x010B	0x3003      	MOVLW      3
0x010C	0x0225      	SUBWF      _i, 0
L__main37:
0x010D	0x1803      	BTFSC      STATUS, 0
0x010E	0x2923      	GOTO       L_main10
;NorOp.c,75 :: 		PORTB = EmergencyLights | 0b10000000;  //Green light off
0x010F	0x3080      	MOVLW      128
0x0110	0x0421      	IORWF      _EmergencyLights, 0
0x0111	0x0086      	MOVWF      PORTB
;NorOp.c,76 :: 		delay(50);
0x0112	0x3032      	MOVLW      50
0x0113	0x00AB      	MOVWF      FARG_delay_sec
0x0114	0x3000      	MOVLW      0
0x0115	0x00AC      	MOVWF      FARG_delay_sec+1
0x0116	0x200C      	CALL       _delay
;NorOp.c,77 :: 		PORTB = EmergencyLights | 0b10000010;  //Green light on
0x0117	0x3082      	MOVLW      130
0x0118	0x0421      	IORWF      _EmergencyLights, 0
0x0119	0x0086      	MOVWF      PORTB
;NorOp.c,78 :: 		delay(50);
0x011A	0x3032      	MOVLW      50
0x011B	0x00AB      	MOVWF      FARG_delay_sec
0x011C	0x3000      	MOVLW      0
0x011D	0x00AC      	MOVWF      FARG_delay_sec+1
0x011E	0x200C      	CALL       _delay
;NorOp.c,73 :: 		for ( i = 0 ; i<3; i++)
0x011F	0x0AA5      	INCF       _i, 1
0x0120	0x1903      	BTFSC      STATUS, 2
0x0121	0x0AA6      	INCF       _i+1, 1
;NorOp.c,79 :: 		}
0x0122	0x2904      	GOTO       L_main9
L_main10:
;NorOp.c,81 :: 		PORTB = EmergencyLights | 0b10000100;
0x0123	0x3084      	MOVLW      132
0x0124	0x0421      	IORWF      _EmergencyLights, 0
0x0125	0x0086      	MOVWF      PORTB
;NorOp.c,82 :: 		delay(200);
0x0126	0x30C8      	MOVLW      200
0x0127	0x00AB      	MOVWF      FARG_delay_sec
0x0128	0x01AC      	CLRF       FARG_delay_sec+1
0x0129	0x200C      	CALL       _delay
;NorOp.c,84 :: 		PORTB = EmergencyLights | 0b10001000;
0x012A	0x3088      	MOVLW      136
0x012B	0x0421      	IORWF      _EmergencyLights, 0
0x012C	0x0086      	MOVWF      PORTB
;NorOp.c,85 :: 		delay(100);
0x012D	0x3064      	MOVLW      100
0x012E	0x00AB      	MOVWF      FARG_delay_sec
0x012F	0x3000      	MOVLW      0
0x0130	0x00AC      	MOVWF      FARG_delay_sec+1
0x0131	0x200C      	CALL       _delay
;NorOp.c,86 :: 		emergency ();
0x0132	0x2021      	CALL       _emergency
;NorOp.c,91 :: 		PORTB = EmergencyLights | 0b10001000;
0x0133	0x3088      	MOVLW      136
0x0134	0x0421      	IORWF      _EmergencyLights, 0
0x0135	0x0086      	MOVWF      PORTB
;NorOp.c,92 :: 		PORTD = EmergencyLights | 0b00101000;
0x0136	0x3028      	MOVLW      40
0x0137	0x0421      	IORWF      _EmergencyLights, 0
0x0138	0x0088      	MOVWF      PORTD
;NorOp.c,93 :: 		delay(1000);    //Traffic light stays green for 10 seconds
0x0139	0x30E8      	MOVLW      232
0x013A	0x00AB      	MOVWF      FARG_delay_sec
0x013B	0x3003      	MOVLW      3
0x013C	0x00AC      	MOVWF      FARG_delay_sec+1
0x013D	0x200C      	CALL       _delay
;NorOp.c,95 :: 		for ( i = 0 ; i<3; i++)
0x013E	0x01A5      	CLRF       _i
0x013F	0x01A6      	CLRF       _i+1
L_main12:
0x0140	0x3080      	MOVLW      128
0x0141	0x0626      	XORWF      _i+1, 0
0x0142	0x00F0      	MOVWF      R0
0x0143	0x3080      	MOVLW      128
0x0144	0x0270      	SUBWF      R0, 0
0x0145	0x1D03      	BTFSS      STATUS, 2
0x0146	0x2949      	GOTO       L__main38
0x0147	0x3003      	MOVLW      3
0x0148	0x0225      	SUBWF      _i, 0
L__main38:
0x0149	0x1803      	BTFSC      STATUS, 0
0x014A	0x295F      	GOTO       L_main13
;NorOp.c,97 :: 		PORTD = EmergencyLights | 0b00001000;  //Green light off
0x014B	0x3008      	MOVLW      8
0x014C	0x0421      	IORWF      _EmergencyLights, 0
0x014D	0x0088      	MOVWF      PORTD
;NorOp.c,98 :: 		delay(50);
0x014E	0x3032      	MOVLW      50
0x014F	0x00AB      	MOVWF      FARG_delay_sec
0x0150	0x3000      	MOVLW      0
0x0151	0x00AC      	MOVWF      FARG_delay_sec+1
0x0152	0x200C      	CALL       _delay
;NorOp.c,99 :: 		PORTD = EmergencyLights | 0b00101000;  //Green light on
0x0153	0x3028      	MOVLW      40
0x0154	0x0421      	IORWF      _EmergencyLights, 0
0x0155	0x0088      	MOVWF      PORTD
;NorOp.c,100 :: 		delay(50);
0x0156	0x3032      	MOVLW      50
0x0157	0x00AB      	MOVWF      FARG_delay_sec
0x0158	0x3000      	MOVLW      0
0x0159	0x00AC      	MOVWF      FARG_delay_sec+1
0x015A	0x200C      	CALL       _delay
;NorOp.c,95 :: 		for ( i = 0 ; i<3; i++)
0x015B	0x0AA5      	INCF       _i, 1
0x015C	0x1903      	BTFSC      STATUS, 2
0x015D	0x0AA6      	INCF       _i+1, 1
;NorOp.c,101 :: 		}
0x015E	0x2940      	GOTO       L_main12
L_main13:
;NorOp.c,103 :: 		PORTD = EmergencyLights | 0b01001000;
0x015F	0x3048      	MOVLW      72
0x0160	0x0421      	IORWF      _EmergencyLights, 0
0x0161	0x0088      	MOVWF      PORTD
;NorOp.c,104 :: 		delay(200);
0x0162	0x30C8      	MOVLW      200
0x0163	0x00AB      	MOVWF      FARG_delay_sec
0x0164	0x01AC      	CLRF       FARG_delay_sec+1
0x0165	0x200C      	CALL       _delay
;NorOp.c,106 :: 		PORTD = EmergencyLights | 0b10001000;
0x0166	0x3088      	MOVLW      136
0x0167	0x0421      	IORWF      _EmergencyLights, 0
0x0168	0x0088      	MOVWF      PORTD
;NorOp.c,107 :: 		delay(100);
0x0169	0x3064      	MOVLW      100
0x016A	0x00AB      	MOVWF      FARG_delay_sec
0x016B	0x3000      	MOVLW      0
0x016C	0x00AC      	MOVWF      FARG_delay_sec+1
0x016D	0x200C      	CALL       _delay
;NorOp.c,108 :: 		emergency ();
0x016E	0x2021      	CALL       _emergency
;NorOp.c,113 :: 		PORTB = EmergencyLights | 0b10001000;
0x016F	0x3088      	MOVLW      136
0x0170	0x0421      	IORWF      _EmergencyLights, 0
0x0171	0x0086      	MOVWF      PORTB
;NorOp.c,114 :: 		PORTD = EmergencyLights | 0b10000010;
0x0172	0x3082      	MOVLW      130
0x0173	0x0421      	IORWF      _EmergencyLights, 0
0x0174	0x0088      	MOVWF      PORTD
;NorOp.c,115 :: 		delay(1000);    //Traffic light stays green for 10 seconds
0x0175	0x30E8      	MOVLW      232
0x0176	0x00AB      	MOVWF      FARG_delay_sec
0x0177	0x3003      	MOVLW      3
0x0178	0x00AC      	MOVWF      FARG_delay_sec+1
0x0179	0x200C      	CALL       _delay
;NorOp.c,117 :: 		for ( i = 0 ; i<3; i++)
0x017A	0x01A5      	CLRF       _i
0x017B	0x01A6      	CLRF       _i+1
L_main15:
0x017C	0x3080      	MOVLW      128
0x017D	0x0626      	XORWF      _i+1, 0
0x017E	0x00F0      	MOVWF      R0
0x017F	0x3080      	MOVLW      128
0x0180	0x0270      	SUBWF      R0, 0
0x0181	0x1D03      	BTFSS      STATUS, 2
0x0182	0x2985      	GOTO       L__main39
0x0183	0x3003      	MOVLW      3
0x0184	0x0225      	SUBWF      _i, 0
L__main39:
0x0185	0x1803      	BTFSC      STATUS, 0
0x0186	0x299B      	GOTO       L_main16
;NorOp.c,119 :: 		PORTD = EmergencyLights | 0b10000000;  //Green light off
0x0187	0x3080      	MOVLW      128
0x0188	0x0421      	IORWF      _EmergencyLights, 0
0x0189	0x0088      	MOVWF      PORTD
;NorOp.c,120 :: 		delay(50);
0x018A	0x3032      	MOVLW      50
0x018B	0x00AB      	MOVWF      FARG_delay_sec
0x018C	0x3000      	MOVLW      0
0x018D	0x00AC      	MOVWF      FARG_delay_sec+1
0x018E	0x200C      	CALL       _delay
;NorOp.c,121 :: 		PORTD = EmergencyLights | 0b10000010;  //Green light on
0x018F	0x3082      	MOVLW      130
0x0190	0x0421      	IORWF      _EmergencyLights, 0
0x0191	0x0088      	MOVWF      PORTD
;NorOp.c,122 :: 		delay(50);
0x0192	0x3032      	MOVLW      50
0x0193	0x00AB      	MOVWF      FARG_delay_sec
0x0194	0x3000      	MOVLW      0
0x0195	0x00AC      	MOVWF      FARG_delay_sec+1
0x0196	0x200C      	CALL       _delay
;NorOp.c,117 :: 		for ( i = 0 ; i<3; i++)
0x0197	0x0AA5      	INCF       _i, 1
0x0198	0x1903      	BTFSC      STATUS, 2
0x0199	0x0AA6      	INCF       _i+1, 1
;NorOp.c,123 :: 		}
0x019A	0x297C      	GOTO       L_main15
L_main16:
;NorOp.c,125 :: 		PORTD = EmergencyLights | 0b10000100;
0x019B	0x3084      	MOVLW      132
0x019C	0x0421      	IORWF      _EmergencyLights, 0
0x019D	0x0088      	MOVWF      PORTD
;NorOp.c,126 :: 		delay(200);
0x019E	0x30C8      	MOVLW      200
0x019F	0x00AB      	MOVWF      FARG_delay_sec
0x01A0	0x01AC      	CLRF       FARG_delay_sec+1
0x01A1	0x200C      	CALL       _delay
;NorOp.c,128 :: 		PORTD = EmergencyLights | 0b10001000;
0x01A2	0x3088      	MOVLW      136
0x01A3	0x0421      	IORWF      _EmergencyLights, 0
0x01A4	0x0088      	MOVWF      PORTD
;NorOp.c,129 :: 		delay(100);
0x01A5	0x3064      	MOVLW      100
0x01A6	0x00AB      	MOVWF      FARG_delay_sec
0x01A7	0x3000      	MOVLW      0
0x01A8	0x00AC      	MOVWF      FARG_delay_sec+1
0x01A9	0x200C      	CALL       _delay
;NorOp.c,130 :: 		emergency ();
0x01AA	0x2021      	CALL       _emergency
;NorOp.c,131 :: 		} // While
0x01AB	0x28BB      	GOTO       L_main4
;NorOp.c,136 :: 		}
0x01AC	0x29AC      	GOTO       $+0
; end of _main
_interrupt:
0x01AD	0x00FF      	MOVWF      R15
0x01AE	0x0E03      	SWAPF      STATUS, 0
0x01AF	0x0183      	CLRF       STATUS
0x01B0	0x00A9      	MOVWF      ___saveSTATUS
0x01B1	0x080A      	MOVF       PCLATH, 0
0x01B2	0x00AA      	MOVWF      ___savePCLATH
0x01B3	0x018A      	CLRF       PCLATH
0x01B4	0x0870      	MOVF       R0, 0
0x01B5	0x00A0      	MOVWF      32
;NorOp.c,10 :: 		interrupt ()
;NorOp.c,12 :: 		if (INTCON & 0x04){    // check if the interrupt is caused by TMR0
0x01B6	0x1D0B      	BTFSS      INTCON, 2
0x01B7	0x29BF      	GOTO       L_interrupt0
;NorOp.c,13 :: 		intcon = intcon & 0xFb;
0x01B8	0x30FB      	MOVLW      251
0x01B9	0x058B      	ANDWF      INTCON, 1
;NorOp.c,14 :: 		tick++;
0x01BA	0x0AA2      	INCF       _tick, 1
0x01BB	0x1903      	BTFSC      STATUS, 2
0x01BC	0x0AA3      	INCF       _tick+1, 1
;NorOp.c,15 :: 		TMR0 = 0xFF - 0x50;
0x01BD	0x30AF      	MOVLW      175
0x01BE	0x0081      	MOVWF      TMR0
;NorOp.c,16 :: 		}
L_interrupt0:
;NorOp.c,17 :: 		if (PIR1 & 0x02){      // check if the interrupt is caused by serial receive
0x01BF	0x1C8C      	BTFSS      PIR1, 1
0x01C0	0x29CA      	GOTO       L_interrupt1
;NorOp.c,18 :: 		Pressed = RCREG;
0x01C1	0x081A      	MOVF       RCREG, 0
0x01C2	0x00A4      	MOVWF      _Pressed
;NorOp.c,19 :: 		PORTB = PORTB | 0b00010001;
0x01C3	0x3011      	MOVLW      17
0x01C4	0x0486      	IORWF      PORTB, 1
;NorOp.c,20 :: 		PORTD = PORTD | 0b00010001;
0x01C5	0x3011      	MOVLW      17
0x01C6	0x0488      	IORWF      PORTD, 1
;NorOp.c,21 :: 		EmergencyLights = 0b00010001;
0x01C7	0x3011      	MOVLW      17
0x01C8	0x00A1      	MOVWF      _EmergencyLights
;NorOp.c,22 :: 		PIR1 = 0x00;  }
0x01C9	0x018C      	CLRF       PIR1
L_interrupt1:
;NorOp.c,24 :: 		}
L__interrupt34:
0x01CA	0x0820      	MOVF       32, 0
0x01CB	0x00F0      	MOVWF      R0
0x01CC	0x082A      	MOVF       ___savePCLATH, 0
0x01CD	0x008A      	MOVWF      PCLATH
0x01CE	0x0E29      	SWAPF      ___saveSTATUS, 0
0x01CF	0x0083      	MOVWF      STATUS
0x01D0	0x0EFF      	SWAPF      R15, 1
0x01D1	0x0E7F      	SWAPF      R15, 0
0x01D2	0x0009      	RETFIE
; end of _interrupt
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0005       [7]    _____DoICP
0x000C      [21]    _delay
0x0021      [99]    _emergency
0x0084      [16]    _USART_init
0x0094      [12]    ___CC2DW
0x00A0     [269]    _main
0x01AD      [38]    _interrupt
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0001       [1]    TMR0
0x0002       [1]    PCL
0x0003       [1]    STATUS
0x0003       [0]    NOT_PD_bit
0x0003       [0]    NOT_TO_bit
0x0003       [0]    Z_bit
0x0003       [0]    C_bit
0x0003       [0]    DC_bit
0x0003       [0]    RP0_bit
0x0003       [0]    RP1_bit
0x0003       [0]    IRP_bit
0x0004       [1]    FSRPTR
0x0004       [1]    FSR
0x0005       [0]    RA1_bit
0x0005       [1]    PORTA
0x0005       [0]    RA0_bit
0x0005       [0]    RA4_bit
0x0005       [0]    RA3_bit
0x0005       [0]    RA2_bit
0x0005       [0]    RA5_bit
0x0006       [0]    RB1_bit
0x0006       [0]    RB2_bit
0x0006       [1]    PORTB
0x0006       [0]    RB0_bit
0x0006       [0]    RB3_bit
0x0006       [0]    RB6_bit
0x0006       [0]    RB7_bit
0x0006       [0]    RB4_bit
0x0006       [0]    RB5_bit
0x0007       [0]    RC1_bit
0x0007       [0]    RC2_bit
0x0007       [1]    PORTC
0x0007       [0]    RC0_bit
0x0007       [0]    RC7_bit
0x0007       [0]    RC6_bit
0x0007       [0]    RC5_bit
0x0007       [0]    RC3_bit
0x0007       [0]    RC4_bit
0x0008       [0]    RD1_bit
0x0008       [0]    RD0_bit
0x0008       [1]    PORTD
0x0008       [0]    RD2_bit
0x0008       [0]    RD6_bit
0x0008       [0]    RD7_bit
0x0008       [0]    RD5_bit
0x0008       [0]    RD3_bit
0x0008       [0]    RD4_bit
0x0009       [0]    RE0_bit
0x0009       [1]    PORTE
0x0009       [0]    RE1_bit
0x0009       [0]    RE2_bit
0x000A       [1]    PCLATH
0x000B       [0]    INTF_bit
0x000B       [1]    INTCON
0x000B       [0]    TMR0IF_bit
0x000B       [0]    GIE_bit
0x000B       [0]    RBIE_bit
0x000B       [0]    T0IE_bit
0x000B       [0]    INTE_bit
0x000B       [0]    TMR0IE_bit
0x000B       [0]    RBIF_bit
0x000B       [0]    T0IF_bit
0x000B       [0]    PEIE_bit
0x000C       [1]    PIR1
0x000C       [0]    TXIF_bit
0x000C       [0]    RCIF_bit
0x000C       [0]    SSPIF_bit
0x000C       [0]    CCP1IF_bit
0x000C       [0]    TMR2IF_bit
0x000C       [0]    TMR1IF_bit
0x000C       [0]    ADIF_bit
0x000C       [0]    PSPIF_bit
0x000D       [0]    EEIF_bit
0x000D       [0]    CCP2IF_bit
0x000D       [0]    BCLIF_bit
0x000D       [1]    PIR2
0x000D       [0]    CMIF_bit
0x000E       [1]    TMR1L
0x000F       [1]    TMR1H
0x0010       [0]    T1SYNC_bit
0x0010       [1]    T1CON
0x0010       [0]    TMR1CS_bit
0x0010       [0]    T1CKPS1_bit
0x0010       [0]    TMR1ON_bit
0x0010       [0]    T1OSCEN_bit
0x0010       [0]    NOT_T1SYNC_bit
0x0010       [0]    T1INSYNC_bit
0x0010       [0]    T1CKPS0_bit
0x0011       [1]    TMR2
0x0012       [0]    T2CKPS0_bit
0x0012       [0]    TMR2ON_bit
0x0012       [0]    TOUTPS1_bit
0x0012       [0]    TOUTPS3_bit
0x0012       [0]    TOUTPS2_bit
0x0012       [0]    TOUTPS0_bit
0x0012       [1]    T2CON
0x0012       [0]    T2CKPS1_bit
0x0013       [1]    SSPBUF
0x0014       [0]    WCOL_bit
0x0014       [0]    SSPM1_bit
0x0014       [0]    CKP_bit
0x0014       [0]    SSPM3_bit
0x0014       [0]    SSPOV_bit
0x0014       [0]    SSPM0_bit
0x0014       [1]    SSPCON
0x0014       [0]    SSPEN_bit
0x0014       [0]    SSPM2_bit
0x0015       [1]    CCPR1L
0x0016       [1]    CCPR1H
0x0017       [1]    CCP1CON
0x0017       [0]    CCP1M3_bit
0x0017       [0]    CCP1M2_bit
0x0017       [0]    CCP1Y_bit
0x0017       [0]    CCP1M0_bit
0x0017       [0]    CCP1X_bit
0x0017       [0]    CCP1M1_bit
0x0018       [1]    RCSTA
0x0018       [0]    RCD8_bit
0x0018       [0]    RX9D_bit
0x0018       [0]    RC8_9_bit
0x0018       [0]    SREN_bit
0x0018       [0]    NOT_RC8_bit
0x0018       [0]    RC9_bit
0x0018       [0]    RX9_bit
0x0018       [0]    OERR_bit
0x0018       [0]    FERR_bit
0x0018       [0]    SPEN_bit
0x0018       [0]    CREN_bit
0x0018       [0]    ADDEN_bit
0x0019       [1]    TXREG
0x001A       [1]    RCREG
0x001B       [1]    CCPR2L
0x001C       [1]    CCPR2H
0x001D       [0]    CCP2X_bit
0x001D       [0]    CCP2M2_bit
0x001D       [1]    CCP2CON
0x001D       [0]    CCP2Y_bit
0x001D       [0]    CCP2M0_bit
0x001D       [0]    CCP2M1_bit
0x001D       [0]    CCP2M3_bit
0x001E       [1]    ADRESH
0x001F       [0]    CHS2_bit
0x001F       [0]    CHS0_bit
0x001F       [0]    CHS1_bit
0x001F       [0]    GO_bit
0x001F       [0]    GO_DONE_bit
0x001F       [0]    NOT_DONE_bit
0x001F       [0]    ADCS0_bit
0x001F       [0]    ADON_bit
0x001F       [1]    ADCON0
0x001F       [0]    ADCS1_bit
0x0021       [1]    _EmergencyLights
0x0022       [2]    _tick
0x0024       [1]    _Pressed
0x0025       [2]    _i
0x0027       [2]    ___DoICPAddr
0x0029       [1]    ___saveSTATUS
0x002A       [1]    ___savePCLATH
0x002B       [2]    FARG_delay_sec
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0081       [0]    PS2_bit
0x0081       [0]    PS1_bit
0x0081       [0]    PS0_bit
0x0081       [0]    PSA_bit
0x0081       [0]    NOT_RBPU_bit
0x0081       [0]    INTEDG_bit
0x0081       [0]    T0SE_bit
0x0081       [0]    T0CS_bit
0x0081       [1]    OPTION_REG
0x0085       [0]    TRISA2_bit
0x0085       [0]    TRISA0_bit
0x0085       [0]    TRISA1_bit
0x0085       [0]    TRISA3_bit
0x0085       [1]    TRISA
0x0085       [0]    TRISA5_bit
0x0085       [0]    TRISA4_bit
0x0086       [0]    TRISB5_bit
0x0086       [0]    TRISB3_bit
0x0086       [0]    TRISB4_bit
0x0086       [0]    TRISB0_bit
0x0086       [0]    TRISB1_bit
0x0086       [0]    TRISB2_bit
0x0086       [1]    TRISB
0x0086       [0]    TRISB7_bit
0x0086       [0]    TRISB6_bit
0x0087       [0]    TRISC6_bit
0x0087       [1]    TRISC
0x0087       [0]    TRISC4_bit
0x0087       [0]    TRISC7_bit
0x0087       [0]    TRISC3_bit
0x0087       [0]    TRISC0_bit
0x0087       [0]    TRISC5_bit
0x0087       [0]    TRISC1_bit
0x0087       [0]    TRISC2_bit
0x0088       [0]    TRISD7_bit
0x0088       [0]    TRISD6_bit
0x0088       [0]    TRISD2_bit
0x0088       [0]    TRISD1_bit
0x0088       [0]    TRISD0_bit
0x0088       [0]    TRISD5_bit
0x0088       [0]    TRISD4_bit
0x0088       [0]    TRISD3_bit
0x0088       [1]    TRISD
0x0089       [0]    TRISE2_bit
0x0089       [0]    PSPMODE_TRISE_bit
0x0089       [0]    IBF_bit
0x0089       [0]    TRISE1_bit
0x0089       [0]    IBOV_TRISE_bit
0x0089       [0]    OBF_bit
0x0089       [0]    IBOV_bit
0x0089       [0]    OBF_TRISE_bit
0x0089       [0]    IBF_TRISE_bit
0x0089       [0]    PSPMODE_bit
0x0089       [1]    TRISE
0x0089       [0]    TRISE0_bit
0x008C       [1]    PIE1
0x008C       [0]    PSPIE_bit
0x008C       [0]    ADIE_bit
0x008C       [0]    CCP1IE_bit
0x008C       [0]    TXIE_bit
0x008C       [0]    RCIE_bit
0x008C       [0]    SSPIE_bit
0x008C       [0]    TMR2IE_bit
0x008C       [0]    TMR1IE_bit
0x008D       [0]    EEIE_bit
0x008D       [0]    CMIE_bit
0x008D       [1]    PIE2
0x008D       [0]    BCLIE_bit
0x008D       [0]    CCP2IE_bit
0x008E       [1]    PCON
0x008E       [0]    NOT_BOR_bit
0x008E       [0]    NOT_BO_bit
0x008E       [0]    NOT_POR_bit
0x0091       [0]    ACKSTAT_bit
0x0091       [0]    GCEN_bit
0x0091       [0]    PEN_bit
0x0091       [1]    SSPCON2
0x0091       [0]    RCEN_bit
0x0091       [0]    ACKEN_bit
0x0091       [0]    ACKDT_bit
0x0091       [0]    RSEN_bit
0x0091       [0]    SEN_bit
0x0092       [1]    PR2
0x0093       [1]    SSPADD
0x0094       [0]    D_bit
0x0094       [0]    READ_WRITE_bit
0x0094       [0]    R_W_bit
0x0094       [0]    NOT_WRITE_bit
0x0094       [0]    DATA_ADDRESS_bit
0x0094       [0]    BF_bit
0x0094       [0]    UA_bit
0x0094       [0]    NOT_ADDRESS_bit
0x0094       [0]    SMP_bit
0x0094       [0]    P_bit
0x0094       [0]    I2C_DATA_bit
0x0094       [1]    SSPSTAT
0x0094       [0]    S_bit
0x0094       [0]    CKE_bit
0x0094       [0]    I2C_STOP__bit
0x0094       [0]    NOT_A_bit
0x0094       [0]    D_A_bit
0x0094       [0]    NOT_W_bit
0x0094       [0]    I2C_READ_bit
0x0094       [0]    I2C_START__bit
0x0094       [0]    R_bit
0x0098       [0]    SYNC_bit
0x0098       [0]    TX9_bit
0x0098       [0]    TXEN_bit
0x0098       [1]    TXSTA
0x0098       [0]    CSRC_bit
0x0098       [0]    BRGH_bit
0x0098       [0]    NOT_TX8_bit
0x0098       [0]    TXD8_bit
0x0098       [0]    TX9D_bit
0x0098       [0]    TRMT_bit
0x0098       [0]    TX8_9_bit
0x0099       [1]    SPBRG
0x009C       [1]    CMCON
0x009C       [0]    C1INV_bit
0x009C       [0]    CIS_bit
0x009C       [0]    C1OUT_bit
0x009C       [0]    C2INV_bit
0x009C       [0]    C2OUT_bit
0x009C       [0]    CM0_bit
0x009C       [0]    CM1_bit
0x009C       [0]    CM2_bit
0x009D       [1]    CVRCON
0x009D       [0]    CVREN_bit
0x009D       [0]    CVRR_bit
0x009D       [0]    CVROE_bit
0x009D       [0]    CVR2_bit
0x009D       [0]    CVR3_bit
0x009D       [0]    CVR1_bit
0x009D       [0]    CVR0_bit
0x009E       [1]    ADRESL
0x009F       [0]    PCFG0_bit
0x009F       [1]    ADCON1
0x009F       [0]    ADFM_bit
0x009F       [0]    ADCS2_bit
0x009F       [0]    PCFG3_bit
0x009F       [0]    PCFG1_bit
0x009F       [0]    PCFG2_bit
0x010C       [1]    EEDATA
0x010D       [1]    EEADR
0x010E       [1]    EEDATH
0x010F       [1]    EEADRH
0x018C       [1]    EECON1
0x018C       [0]    WREN_bit
0x018C       [0]    WRERR_bit
0x018C       [0]    EEPGD_bit
0x018C       [0]    RD_bit
0x018C       [0]    WR_bit
0x018D       [1]    EECON2
//** Label List: ** 
//----------------------------------------------
  L_interrupt0
  L_interrupt1
  L_delay2
  L_delay3
  L_main4
  L_main5
  L_main6
  L_main7
  L_main8
  L_main9
  L_main10
  L_main11
  L_main12
  L_main13
  L_main14
  L_main15
  L_main16
  L_main17
  L_emergency18
  L_emergency19
  L_emergency20
  L_emergency21
  L_emergency22
  L_emergency23
  L_emergency24
  L_emergency25
  L_emergency26
  L_emergency27
  L_emergency28
  L_emergency29
  L_emergency30
  L_emergency31
  L_emergency32
  L_emergency33
  _interrupt
  L__interrupt34
  _delay
  L__delay35
  _main
  L__main36
  L__main37
  L__main38
  L__main39
  _emergency
  _USART_init
  _CC2D_Loop1
  _____DoICP
  _____DoIFC
  ___CC2DW
  L_interrupt0
  L_interrupt1
  L_delay2
  L_delay3
  L_main4
  L_main5
  L_main6
  L_main7
  L_main8
  L_main9
  L_main10
  L_main11
  L_main12
  L_main13
  L_main14
  L_main15
  L_main16
  L_main17
  L_emergency18
  L_emergency19
  L_emergency20
  L_emergency21
  L_emergency22
  L_emergency23
  L_emergency24
  L_emergency25
  L_emergency26
  L_emergency27
  L_emergency28
  L_emergency29
  L_emergency30
  L_emergency31
  L_emergency32
  L_emergency33
  _interrupt
  L__interrupt34
  _delay
  L__delay35
  _main
  L__main36
  L__main37
  L__main38
  L__main39
  _emergency
  _USART_init
